#spring监控配置
spring.datasource.druid.aop-patterns = com.xy.mybatis.*

#是否启用StatFilter默认值true
spring.datasource.druid.web-stat-filter.enabled= true
#对以下URI进行URI监控
#注：druid有sql监控、uri监控、spring监控  如果有两个uri /card1  /card2  调用方法内部逻辑完全一样  配置url-pattern = /card1   这时分别调用1次/card1和1次/card2
#那么在uri监控中只会显示/card1的调用信息，但是在sql监控和spring监控中会有两条的统计，也就是说url-pattern只会影响到uri监控
spring.datasource.druid.web-stat-filter.url-pattern= /*
#忽略资源
spring.datasource.druid.web-stat-filter.exclusions= *.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/* 
#开启session监控功能
spring.datasource.druid.web-stat-filter.session-stat-enable=true
#缺省sessionStatMaxCount是1000个。可以按需要进行配置
spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
#可以配置principalSessionName，使得druid能够知道当前的session的用户是谁。根据需要，把其中的xxx.user修改为user信息保存在session中的sessionName。
#注意：如果session中保存的是非string类型的对象，需要重载toString方法。
spring.datasource.druid.web-stat-filter.principal-session-name= username
#如果user信息保存在cookie中，可以配置principalCookieName，使得druid知道当前的user是谁，根据需要，把其中的xxx.user修改为user信息保存在cookie中的cookieName
spring.datasource.druid.web-stat-filter.principal-cookie-name=xxx.user
#配置profileEnable能够监控单个url调用的sql列表
spring.datasource.druid.web-stat-filter.profile-enable= true


#是否启用StatViewServlet默认值true
spring.datasource.druid.stat-view-servlet.enabled= true
#拦截地址
spring.datasource.druid.stat-view-servlet.url-pattern= /druid/*
#禁用HTML页面上的“Reset All”功能
spring.datasource.druid.stat-view-servlet.reset-enable= false
#访问用户名
spring.datasource.druid.stat-view-servlet.login-username= xiayun
#访问密码
spring.datasource.druid.stat-view-servlet.login-password= 111111
#IP白名单(没有配置或者为空，则允许所有访问)
spring.datasource.druid.stat-view-servlet.allow= 192.168.9.198
#IP黑名单 (存在共同时，deny优先于allow)
spring.datasource.druid.stat-view-servlet.deny= 192.168.9.101